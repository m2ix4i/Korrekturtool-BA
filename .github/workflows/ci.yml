name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt-dev python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Install flake8 if not in requirements
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        # Run tests without API-dependent tests first
        pytest tests/ -m "not api" -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests (with API)
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        # Only run API tests if API key is available
        if [ -n "$GOOGLE_API_KEY" ]; then
          echo "Running API integration tests..."
          pytest tests/ -m "api" -v --tb=short
        else
          echo "Skipping API tests - no API key provided"
        fi
      continue-on-error: true
    
    - name: Run performance tests
      run: |
        # Run performance tests separately
        pytest tests/ -m "slow" -v --tb=short
      continue-on-error: true
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Test main scripts
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        # Test if main scripts can be imported without errors
        python -c "import main_complete_advanced; print('✓ main_complete_advanced imports successfully')"
        python -c "import main_performance_optimized; print('✓ main_performance_optimized imports successfully')"
        
        # Test help output
        python main_complete_advanced.py --help || echo "Help command failed"
        python main_performance_optimized.py --help || echo "Help command failed"
    
    - name: Validate project structure
      run: |
        # Check if all required files exist
        echo "Checking project structure..."
        test -f "requirements.txt" && echo "✓ requirements.txt found"
        test -f "pytest.ini" && echo "✓ pytest.ini found"
        test -f "conftest.py" && echo "✓ conftest.py found"
        test -f "CLAUDE.md" && echo "✓ CLAUDE.md found"
        test -d "src/" && echo "✓ src/ directory found"
        test -d "tests/" && echo "✓ tests/ directory found"
        
        # Check if Python files have no syntax errors
        echo "Checking Python syntax..."
        python -m py_compile main_complete_advanced.py
        python -m py_compile main_performance_optimized.py
        find src/ -name "*.py" -exec python -m py_compile {} \;
        find tests/ -name "*.py" -exec python -m py_compile {} \;
        echo "✓ All Python files have valid syntax"

  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security scanning tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
    
    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-status:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.test-and-build.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ All checks passed! Build successful."
          exit 0
        else
          echo "❌ Build failed! Check the logs above."
          echo "Test job status: ${{ needs.test-and-build.result }}"
          echo "Security job status: ${{ needs.security-scan.result }}"
          exit 1
        fi